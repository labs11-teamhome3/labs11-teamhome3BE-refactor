// Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  team: (where?: TeamWhereInput) => Promise<boolean>;
  todo: (where?: TodoWhereInput) => Promise<boolean>;
  todoList: (where?: TodoListWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  team: (where: TeamWhereUniqueInput) => TeamPromise;
  teams: (
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Team>;
  teamsConnection: (
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TeamConnectionPromise;
  todo: (where: TodoWhereUniqueInput) => TodoPromise;
  todoes: (
    args?: {
      where?: TodoWhereInput;
      orderBy?: TodoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Todo>;
  todoesConnection: (
    args?: {
      where?: TodoWhereInput;
      orderBy?: TodoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TodoConnectionPromise;
  todoList: (where: TodoListWhereUniqueInput) => TodoListPromise;
  todoLists: (
    args?: {
      where?: TodoListWhereInput;
      orderBy?: TodoListOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<TodoList>;
  todoListsConnection: (
    args?: {
      where?: TodoListWhereInput;
      orderBy?: TodoListOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TodoListConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createTeam: (data: TeamCreateInput) => TeamPromise;
  updateTeam: (
    args: { data: TeamUpdateInput; where: TeamWhereUniqueInput }
  ) => TeamPromise;
  updateManyTeams: (
    args: { data: TeamUpdateManyMutationInput; where?: TeamWhereInput }
  ) => BatchPayloadPromise;
  upsertTeam: (
    args: {
      where: TeamWhereUniqueInput;
      create: TeamCreateInput;
      update: TeamUpdateInput;
    }
  ) => TeamPromise;
  deleteTeam: (where: TeamWhereUniqueInput) => TeamPromise;
  deleteManyTeams: (where?: TeamWhereInput) => BatchPayloadPromise;
  createTodo: (data: TodoCreateInput) => TodoPromise;
  updateTodo: (
    args: { data: TodoUpdateInput; where: TodoWhereUniqueInput }
  ) => TodoPromise;
  updateManyTodoes: (
    args: { data: TodoUpdateManyMutationInput; where?: TodoWhereInput }
  ) => BatchPayloadPromise;
  upsertTodo: (
    args: {
      where: TodoWhereUniqueInput;
      create: TodoCreateInput;
      update: TodoUpdateInput;
    }
  ) => TodoPromise;
  deleteTodo: (where: TodoWhereUniqueInput) => TodoPromise;
  deleteManyTodoes: (where?: TodoWhereInput) => BatchPayloadPromise;
  createTodoList: (data: TodoListCreateInput) => TodoListPromise;
  updateTodoList: (
    args: { data: TodoListUpdateInput; where: TodoListWhereUniqueInput }
  ) => TodoListPromise;
  updateManyTodoLists: (
    args: { data: TodoListUpdateManyMutationInput; where?: TodoListWhereInput }
  ) => BatchPayloadPromise;
  upsertTodoList: (
    args: {
      where: TodoListWhereUniqueInput;
      create: TodoListCreateInput;
      update: TodoListUpdateInput;
    }
  ) => TodoListPromise;
  deleteTodoList: (where: TodoListWhereUniqueInput) => TodoListPromise;
  deleteManyTodoLists: (where?: TodoListWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  team: (
    where?: TeamSubscriptionWhereInput
  ) => TeamSubscriptionPayloadSubscription;
  todo: (
    where?: TodoSubscriptionWhereInput
  ) => TodoSubscriptionPayloadSubscription;
  todoList: (
    where?: TodoListSubscriptionWhereInput
  ) => TodoListSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TodoListOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "description_ASC"
  | "description_DESC"
  | "completed_ASC"
  | "completed_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TodoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "description_ASC"
  | "description_DESC"
  | "completed_ASC"
  | "completed_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TeamOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "teamName_ASC"
  | "teamName_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface TeamUpdateOneWithoutMembersInput {
  create?: TeamCreateWithoutMembersInput;
  update?: TeamUpdateWithoutMembersDataInput;
  upsert?: TeamUpsertWithoutMembersInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: TeamWhereUniqueInput;
}

export type TeamWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface TodoListUpdateWithWhereUniqueWithoutInTeamInput {
  where: TodoListWhereUniqueInput;
  data: TodoListUpdateWithoutInTeamDataInput;
}

export interface TodoWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  partOf?: TodoListWhereInput;
  completed?: Boolean;
  completed_not?: Boolean;
  AND?: TodoWhereInput[] | TodoWhereInput;
  OR?: TodoWhereInput[] | TodoWhereInput;
  NOT?: TodoWhereInput[] | TodoWhereInput;
}

export interface TodoListUpdateWithoutInTeamDataInput {
  description?: String;
  ownedBy?: UserUpdateManyWithoutTodoListsOwnedInput;
  assignedTo?: UserUpdateManyWithoutTodoListsAssignedInput;
  todos?: TodoUpdateManyWithoutPartOfInput;
  completed?: Boolean;
}

export interface TeamWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  teamName?: String;
  teamName_not?: String;
  teamName_in?: String[] | String;
  teamName_not_in?: String[] | String;
  teamName_lt?: String;
  teamName_lte?: String;
  teamName_gt?: String;
  teamName_gte?: String;
  teamName_contains?: String;
  teamName_not_contains?: String;
  teamName_starts_with?: String;
  teamName_not_starts_with?: String;
  teamName_ends_with?: String;
  teamName_not_ends_with?: String;
  members_every?: UserWhereInput;
  members_some?: UserWhereInput;
  members_none?: UserWhereInput;
  todoLists_every?: TodoListWhereInput;
  todoLists_some?: TodoListWhereInput;
  todoLists_none?: TodoListWhereInput;
  AND?: TeamWhereInput[] | TeamWhereInput;
  OR?: TeamWhereInput[] | TeamWhereInput;
  NOT?: TeamWhereInput[] | TeamWhereInput;
}

export interface TeamUpdateInput {
  teamName?: String;
  members?: UserUpdateManyWithoutInTeamInput;
  todoLists?: TodoListUpdateManyWithoutInTeamInput;
}

export interface TodoListUpsertWithWhereUniqueWithoutOwnedByInput {
  where: TodoListWhereUniqueInput;
  update: TodoListUpdateWithoutOwnedByDataInput;
  create: TodoListCreateWithoutOwnedByInput;
}

export interface UserUpdateManyWithoutInTeamInput {
  create?: UserCreateWithoutInTeamInput[] | UserCreateWithoutInTeamInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutInTeamInput[]
    | UserUpdateWithWhereUniqueWithoutInTeamInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutInTeamInput[]
    | UserUpsertWithWhereUniqueWithoutInTeamInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateManyWithoutTodoListsOwnedInput {
  create?:
    | UserCreateWithoutTodoListsOwnedInput[]
    | UserCreateWithoutTodoListsOwnedInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutTodoListsOwnedInput[]
    | UserUpdateWithWhereUniqueWithoutTodoListsOwnedInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutTodoListsOwnedInput[]
    | UserUpsertWithWhereUniqueWithoutTodoListsOwnedInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueWithoutInTeamInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutInTeamDataInput;
}

export interface TodoListSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TodoListWhereInput;
  AND?: TodoListSubscriptionWhereInput[] | TodoListSubscriptionWhereInput;
  OR?: TodoListSubscriptionWhereInput[] | TodoListSubscriptionWhereInput;
  NOT?: TodoListSubscriptionWhereInput[] | TodoListSubscriptionWhereInput;
}

export interface UserUpdateWithoutInTeamDataInput {
  name?: String;
  todoListsOwned?: TodoListUpdateManyWithoutOwnedByInput;
  todoListsAssigned?: TodoListUpdateManyWithoutAssignedToInput;
}

export interface TodoSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TodoWhereInput;
  AND?: TodoSubscriptionWhereInput[] | TodoSubscriptionWhereInput;
  OR?: TodoSubscriptionWhereInput[] | TodoSubscriptionWhereInput;
  NOT?: TodoSubscriptionWhereInput[] | TodoSubscriptionWhereInput;
}

export interface TodoListUpdateManyWithoutOwnedByInput {
  create?:
    | TodoListCreateWithoutOwnedByInput[]
    | TodoListCreateWithoutOwnedByInput;
  delete?: TodoListWhereUniqueInput[] | TodoListWhereUniqueInput;
  connect?: TodoListWhereUniqueInput[] | TodoListWhereUniqueInput;
  set?: TodoListWhereUniqueInput[] | TodoListWhereUniqueInput;
  disconnect?: TodoListWhereUniqueInput[] | TodoListWhereUniqueInput;
  update?:
    | TodoListUpdateWithWhereUniqueWithoutOwnedByInput[]
    | TodoListUpdateWithWhereUniqueWithoutOwnedByInput;
  upsert?:
    | TodoListUpsertWithWhereUniqueWithoutOwnedByInput[]
    | TodoListUpsertWithWhereUniqueWithoutOwnedByInput;
  deleteMany?: TodoListScalarWhereInput[] | TodoListScalarWhereInput;
  updateMany?:
    | TodoListUpdateManyWithWhereNestedInput[]
    | TodoListUpdateManyWithWhereNestedInput;
}

export interface UserUpdateManyMutationInput {
  name?: String;
}

export interface TodoListUpdateWithWhereUniqueWithoutOwnedByInput {
  where: TodoListWhereUniqueInput;
  data: TodoListUpdateWithoutOwnedByDataInput;
}

export interface UserCreateInput {
  name: String;
  todoListsOwned?: TodoListCreateManyWithoutOwnedByInput;
  todoListsAssigned?: TodoListCreateManyWithoutAssignedToInput;
  inTeam?: TeamCreateOneWithoutMembersInput;
}

export interface TodoListUpdateWithoutOwnedByDataInput {
  description?: String;
  assignedTo?: UserUpdateManyWithoutTodoListsAssignedInput;
  todos?: TodoUpdateManyWithoutPartOfInput;
  completed?: Boolean;
  inTeam?: TeamUpdateOneWithoutTodoListsInput;
}

export type TodoWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateManyWithoutTodoListsAssignedInput {
  create?:
    | UserCreateWithoutTodoListsAssignedInput[]
    | UserCreateWithoutTodoListsAssignedInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutTodoListsAssignedInput[]
    | UserUpdateWithWhereUniqueWithoutTodoListsAssignedInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutTodoListsAssignedInput[]
    | UserUpsertWithWhereUniqueWithoutTodoListsAssignedInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface TodoListCreateInput {
  description: String;
  ownedBy?: UserCreateManyWithoutTodoListsOwnedInput;
  assignedTo?: UserCreateManyWithoutTodoListsAssignedInput;
  todos?: TodoCreateManyWithoutPartOfInput;
  completed?: Boolean;
  inTeam?: TeamCreateOneWithoutTodoListsInput;
}

export interface UserUpdateWithWhereUniqueWithoutTodoListsAssignedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutTodoListsAssignedDataInput;
}

export type TodoListWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateWithoutTodoListsAssignedDataInput {
  name?: String;
  todoListsOwned?: TodoListUpdateManyWithoutOwnedByInput;
  inTeam?: TeamUpdateOneWithoutMembersInput;
}

export interface TodoListUpdateWithoutTodosDataInput {
  description?: String;
  ownedBy?: UserUpdateManyWithoutTodoListsOwnedInput;
  assignedTo?: UserUpdateManyWithoutTodoListsAssignedInput;
  completed?: Boolean;
  inTeam?: TeamUpdateOneWithoutTodoListsInput;
}

export interface TodoCreateInput {
  description: String;
  partOf?: TodoListCreateOneWithoutTodosInput;
  completed?: Boolean;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface TeamUpdateWithoutMembersDataInput {
  teamName?: String;
  todoLists?: TodoListUpdateManyWithoutInTeamInput;
}

export interface TodoListCreateWithoutTodosInput {
  description: String;
  ownedBy?: UserCreateManyWithoutTodoListsOwnedInput;
  assignedTo?: UserCreateManyWithoutTodoListsAssignedInput;
  completed?: Boolean;
  inTeam?: TeamCreateOneWithoutTodoListsInput;
}

export interface TodoListUpdateManyWithoutInTeamInput {
  create?:
    | TodoListCreateWithoutInTeamInput[]
    | TodoListCreateWithoutInTeamInput;
  delete?: TodoListWhereUniqueInput[] | TodoListWhereUniqueInput;
  connect?: TodoListWhereUniqueInput[] | TodoListWhereUniqueInput;
  set?: TodoListWhereUniqueInput[] | TodoListWhereUniqueInput;
  disconnect?: TodoListWhereUniqueInput[] | TodoListWhereUniqueInput;
  update?:
    | TodoListUpdateWithWhereUniqueWithoutInTeamInput[]
    | TodoListUpdateWithWhereUniqueWithoutInTeamInput;
  upsert?:
    | TodoListUpsertWithWhereUniqueWithoutInTeamInput[]
    | TodoListUpsertWithWhereUniqueWithoutInTeamInput;
  deleteMany?: TodoListScalarWhereInput[] | TodoListScalarWhereInput;
  updateMany?:
    | TodoListUpdateManyWithWhereNestedInput[]
    | TodoListUpdateManyWithWhereNestedInput;
}

export interface UserCreateManyWithoutInTeamInput {
  create?: UserCreateWithoutInTeamInput[] | UserCreateWithoutInTeamInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface TeamUpdateManyMutationInput {
  teamName?: String;
}

export interface TodoListCreateManyWithoutOwnedByInput {
  create?:
    | TodoListCreateWithoutOwnedByInput[]
    | TodoListCreateWithoutOwnedByInput;
  connect?: TodoListWhereUniqueInput[] | TodoListWhereUniqueInput;
}

export interface TodoListWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  ownedBy_every?: UserWhereInput;
  ownedBy_some?: UserWhereInput;
  ownedBy_none?: UserWhereInput;
  assignedTo_every?: UserWhereInput;
  assignedTo_some?: UserWhereInput;
  assignedTo_none?: UserWhereInput;
  todos_every?: TodoWhereInput;
  todos_some?: TodoWhereInput;
  todos_none?: TodoWhereInput;
  completed?: Boolean;
  completed_not?: Boolean;
  inTeam?: TeamWhereInput;
  AND?: TodoListWhereInput[] | TodoListWhereInput;
  OR?: TodoListWhereInput[] | TodoListWhereInput;
  NOT?: TodoListWhereInput[] | TodoListWhereInput;
}

export interface UserCreateManyWithoutTodoListsAssignedInput {
  create?:
    | UserCreateWithoutTodoListsAssignedInput[]
    | UserCreateWithoutTodoListsAssignedInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserUpsertWithWhereUniqueWithoutInTeamInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutInTeamDataInput;
  create: UserCreateWithoutInTeamInput;
}

export interface TeamCreateOneWithoutMembersInput {
  create?: TeamCreateWithoutMembersInput;
  connect?: TeamWhereUniqueInput;
}

export interface UserUpdateWithWhereUniqueWithoutTodoListsOwnedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutTodoListsOwnedDataInput;
}

export interface TodoListCreateManyWithoutInTeamInput {
  create?:
    | TodoListCreateWithoutInTeamInput[]
    | TodoListCreateWithoutInTeamInput;
  connect?: TodoListWhereUniqueInput[] | TodoListWhereUniqueInput;
}

export interface UserUpdateWithoutTodoListsOwnedDataInput {
  name?: String;
  todoListsAssigned?: TodoListUpdateManyWithoutAssignedToInput;
  inTeam?: TeamUpdateOneWithoutMembersInput;
}

export interface UserCreateManyWithoutTodoListsOwnedInput {
  create?:
    | UserCreateWithoutTodoListsOwnedInput[]
    | UserCreateWithoutTodoListsOwnedInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface TodoListUpdateManyWithoutAssignedToInput {
  create?:
    | TodoListCreateWithoutAssignedToInput[]
    | TodoListCreateWithoutAssignedToInput;
  delete?: TodoListWhereUniqueInput[] | TodoListWhereUniqueInput;
  connect?: TodoListWhereUniqueInput[] | TodoListWhereUniqueInput;
  set?: TodoListWhereUniqueInput[] | TodoListWhereUniqueInput;
  disconnect?: TodoListWhereUniqueInput[] | TodoListWhereUniqueInput;
  update?:
    | TodoListUpdateWithWhereUniqueWithoutAssignedToInput[]
    | TodoListUpdateWithWhereUniqueWithoutAssignedToInput;
  upsert?:
    | TodoListUpsertWithWhereUniqueWithoutAssignedToInput[]
    | TodoListUpsertWithWhereUniqueWithoutAssignedToInput;
  deleteMany?: TodoListScalarWhereInput[] | TodoListScalarWhereInput;
  updateMany?:
    | TodoListUpdateManyWithWhereNestedInput[]
    | TodoListUpdateManyWithWhereNestedInput;
}

export interface TodoListCreateManyWithoutAssignedToInput {
  create?:
    | TodoListCreateWithoutAssignedToInput[]
    | TodoListCreateWithoutAssignedToInput;
  connect?: TodoListWhereUniqueInput[] | TodoListWhereUniqueInput;
}

export interface TodoListUpdateWithWhereUniqueWithoutAssignedToInput {
  where: TodoListWhereUniqueInput;
  data: TodoListUpdateWithoutAssignedToDataInput;
}

export interface TodoCreateManyWithoutPartOfInput {
  create?: TodoCreateWithoutPartOfInput[] | TodoCreateWithoutPartOfInput;
  connect?: TodoWhereUniqueInput[] | TodoWhereUniqueInput;
}

export interface TodoListUpdateWithoutAssignedToDataInput {
  description?: String;
  ownedBy?: UserUpdateManyWithoutTodoListsOwnedInput;
  todos?: TodoUpdateManyWithoutPartOfInput;
  completed?: Boolean;
  inTeam?: TeamUpdateOneWithoutTodoListsInput;
}

export interface TeamCreateOneWithoutTodoListsInput {
  create?: TeamCreateWithoutTodoListsInput;
  connect?: TeamWhereUniqueInput;
}

export interface TodoUpdateManyWithoutPartOfInput {
  create?: TodoCreateWithoutPartOfInput[] | TodoCreateWithoutPartOfInput;
  delete?: TodoWhereUniqueInput[] | TodoWhereUniqueInput;
  connect?: TodoWhereUniqueInput[] | TodoWhereUniqueInput;
  set?: TodoWhereUniqueInput[] | TodoWhereUniqueInput;
  disconnect?: TodoWhereUniqueInput[] | TodoWhereUniqueInput;
  update?:
    | TodoUpdateWithWhereUniqueWithoutPartOfInput[]
    | TodoUpdateWithWhereUniqueWithoutPartOfInput;
  upsert?:
    | TodoUpsertWithWhereUniqueWithoutPartOfInput[]
    | TodoUpsertWithWhereUniqueWithoutPartOfInput;
  deleteMany?: TodoScalarWhereInput[] | TodoScalarWhereInput;
  updateMany?:
    | TodoUpdateManyWithWhereNestedInput[]
    | TodoUpdateManyWithWhereNestedInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface TodoUpdateWithWhereUniqueWithoutPartOfInput {
  where: TodoWhereUniqueInput;
  data: TodoUpdateWithoutPartOfDataInput;
}

export interface TeamSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TeamWhereInput;
  AND?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
  OR?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
  NOT?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
}

export interface TodoUpdateWithoutPartOfDataInput {
  description?: String;
  completed?: Boolean;
}

export interface TodoListUpdateManyMutationInput {
  description?: String;
  completed?: Boolean;
}

export interface TodoUpsertWithWhereUniqueWithoutPartOfInput {
  where: TodoWhereUniqueInput;
  update: TodoUpdateWithoutPartOfDataInput;
  create: TodoCreateWithoutPartOfInput;
}

export interface TodoUpdateManyMutationInput {
  description?: String;
  completed?: Boolean;
}

export interface TodoScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  completed?: Boolean;
  completed_not?: Boolean;
  AND?: TodoScalarWhereInput[] | TodoScalarWhereInput;
  OR?: TodoScalarWhereInput[] | TodoScalarWhereInput;
  NOT?: TodoScalarWhereInput[] | TodoScalarWhereInput;
}

export interface TodoListUpdateOneWithoutTodosInput {
  create?: TodoListCreateWithoutTodosInput;
  update?: TodoListUpdateWithoutTodosDataInput;
  upsert?: TodoListUpsertWithoutTodosInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: TodoListWhereUniqueInput;
}

export interface TodoUpdateManyWithWhereNestedInput {
  where: TodoScalarWhereInput;
  data: TodoUpdateManyDataInput;
}

export interface TodoListCreateOneWithoutTodosInput {
  create?: TodoListCreateWithoutTodosInput;
  connect?: TodoListWhereUniqueInput;
}

export interface TodoUpdateManyDataInput {
  description?: String;
  completed?: Boolean;
}

export interface UserCreateWithoutInTeamInput {
  name: String;
  todoListsOwned?: TodoListCreateManyWithoutOwnedByInput;
  todoListsAssigned?: TodoListCreateManyWithoutAssignedToInput;
}

export interface TeamUpdateOneWithoutTodoListsInput {
  create?: TeamCreateWithoutTodoListsInput;
  update?: TeamUpdateWithoutTodoListsDataInput;
  upsert?: TeamUpsertWithoutTodoListsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: TeamWhereUniqueInput;
}

export interface UserCreateWithoutTodoListsAssignedInput {
  name: String;
  todoListsOwned?: TodoListCreateManyWithoutOwnedByInput;
  inTeam?: TeamCreateOneWithoutMembersInput;
}

export interface TeamUpdateWithoutTodoListsDataInput {
  teamName?: String;
  members?: UserUpdateManyWithoutInTeamInput;
}

export interface TodoListCreateWithoutInTeamInput {
  description: String;
  ownedBy?: UserCreateManyWithoutTodoListsOwnedInput;
  assignedTo?: UserCreateManyWithoutTodoListsAssignedInput;
  todos?: TodoCreateManyWithoutPartOfInput;
  completed?: Boolean;
}

export interface TeamUpsertWithoutTodoListsInput {
  update: TeamUpdateWithoutTodoListsDataInput;
  create: TeamCreateWithoutTodoListsInput;
}

export interface TodoListCreateWithoutAssignedToInput {
  description: String;
  ownedBy?: UserCreateManyWithoutTodoListsOwnedInput;
  todos?: TodoCreateManyWithoutPartOfInput;
  completed?: Boolean;
  inTeam?: TeamCreateOneWithoutTodoListsInput;
}

export interface TodoListUpsertWithWhereUniqueWithoutAssignedToInput {
  where: TodoListWhereUniqueInput;
  update: TodoListUpdateWithoutAssignedToDataInput;
  create: TodoListCreateWithoutAssignedToInput;
}

export interface TeamCreateWithoutTodoListsInput {
  teamName: String;
  members?: UserCreateManyWithoutInTeamInput;
}

export interface TodoListScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  completed?: Boolean;
  completed_not?: Boolean;
  AND?: TodoListScalarWhereInput[] | TodoListScalarWhereInput;
  OR?: TodoListScalarWhereInput[] | TodoListScalarWhereInput;
  NOT?: TodoListScalarWhereInput[] | TodoListScalarWhereInput;
}

export interface UserUpdateInput {
  name?: String;
  todoListsOwned?: TodoListUpdateManyWithoutOwnedByInput;
  todoListsAssigned?: TodoListUpdateManyWithoutAssignedToInput;
  inTeam?: TeamUpdateOneWithoutMembersInput;
}

export interface TodoListUpdateManyWithWhereNestedInput {
  where: TodoListScalarWhereInput;
  data: TodoListUpdateManyDataInput;
}

export interface TodoListUpsertWithoutTodosInput {
  update: TodoListUpdateWithoutTodosDataInput;
  create: TodoListCreateWithoutTodosInput;
}

export interface TodoListUpdateManyDataInput {
  description?: String;
  completed?: Boolean;
}

export interface TeamCreateInput {
  teamName: String;
  members?: UserCreateManyWithoutInTeamInput;
  todoLists?: TodoListCreateManyWithoutInTeamInput;
}

export interface UserUpsertWithWhereUniqueWithoutTodoListsOwnedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutTodoListsOwnedDataInput;
  create: UserCreateWithoutTodoListsOwnedInput;
}

export interface TeamCreateWithoutMembersInput {
  teamName: String;
  todoLists?: TodoListCreateManyWithoutInTeamInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface TodoCreateWithoutPartOfInput {
  description: String;
  completed?: Boolean;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface TodoListUpdateInput {
  description?: String;
  ownedBy?: UserUpdateManyWithoutTodoListsOwnedInput;
  assignedTo?: UserUpdateManyWithoutTodoListsAssignedInput;
  todos?: TodoUpdateManyWithoutPartOfInput;
  completed?: Boolean;
  inTeam?: TeamUpdateOneWithoutTodoListsInput;
}

export interface UserUpsertWithWhereUniqueWithoutTodoListsAssignedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutTodoListsAssignedDataInput;
  create: UserCreateWithoutTodoListsAssignedInput;
}

export interface TeamUpsertWithoutMembersInput {
  update: TeamUpdateWithoutMembersDataInput;
  create: TeamCreateWithoutMembersInput;
}

export interface TodoListUpsertWithWhereUniqueWithoutInTeamInput {
  where: TodoListWhereUniqueInput;
  update: TodoListUpdateWithoutInTeamDataInput;
  create: TodoListCreateWithoutInTeamInput;
}

export interface UserUpdateManyDataInput {
  name?: String;
}

export interface TodoUpdateInput {
  description?: String;
  partOf?: TodoListUpdateOneWithoutTodosInput;
  completed?: Boolean;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  todoListsOwned_every?: TodoListWhereInput;
  todoListsOwned_some?: TodoListWhereInput;
  todoListsOwned_none?: TodoListWhereInput;
  todoListsAssigned_every?: TodoListWhereInput;
  todoListsAssigned_some?: TodoListWhereInput;
  todoListsAssigned_none?: TodoListWhereInput;
  inTeam?: TeamWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserCreateWithoutTodoListsOwnedInput {
  name: String;
  todoListsAssigned?: TodoListCreateManyWithoutAssignedToInput;
  inTeam?: TeamCreateOneWithoutMembersInput;
}

export interface TodoListCreateWithoutOwnedByInput {
  description: String;
  assignedTo?: UserCreateManyWithoutTodoListsAssignedInput;
  todos?: TodoCreateManyWithoutPartOfInput;
  completed?: Boolean;
  inTeam?: TeamCreateOneWithoutTodoListsInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface TeamEdge {
  node: Team;
  cursor: String;
}

export interface TeamEdgePromise extends Promise<TeamEdge>, Fragmentable {
  node: <T = TeamPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TeamEdgeSubscription
  extends Promise<AsyncIterator<TeamEdge>>,
    Fragmentable {
  node: <T = TeamSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  todoListsOwned: <T = FragmentableArray<TodoList>>(
    args?: {
      where?: TodoListWhereInput;
      orderBy?: TodoListOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  todoListsAssigned: <T = FragmentableArray<TodoList>>(
    args?: {
      where?: TodoListWhereInput;
      orderBy?: TodoListOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inTeam: <T = TeamPromise>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  todoListsOwned: <T = Promise<AsyncIterator<TodoListSubscription>>>(
    args?: {
      where?: TodoListWhereInput;
      orderBy?: TodoListOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  todoListsAssigned: <T = Promise<AsyncIterator<TodoListSubscription>>>(
    args?: {
      where?: TodoListWhereInput;
      orderBy?: TodoListOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inTeam: <T = TeamSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface TodoList {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  completed?: Boolean;
}

export interface TodoListPromise extends Promise<TodoList>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  ownedBy: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  assignedTo: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  todos: <T = FragmentableArray<Todo>>(
    args?: {
      where?: TodoWhereInput;
      orderBy?: TodoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  completed: () => Promise<Boolean>;
  inTeam: <T = TeamPromise>() => T;
}

export interface TodoListSubscription
  extends Promise<AsyncIterator<TodoList>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  ownedBy: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  assignedTo: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  todos: <T = Promise<AsyncIterator<TodoSubscription>>>(
    args?: {
      where?: TodoWhereInput;
      orderBy?: TodoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  completed: () => Promise<AsyncIterator<Boolean>>;
  inTeam: <T = TeamSubscription>() => T;
}

export interface TodoListPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  completed?: Boolean;
}

export interface TodoListPreviousValuesPromise
  extends Promise<TodoListPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  completed: () => Promise<Boolean>;
}

export interface TodoListPreviousValuesSubscription
  extends Promise<AsyncIterator<TodoListPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  completed: () => Promise<AsyncIterator<Boolean>>;
}

export interface TeamConnection {
  pageInfo: PageInfo;
  edges: TeamEdge[];
}

export interface TeamConnectionPromise
  extends Promise<TeamConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TeamEdge>>() => T;
  aggregate: <T = AggregateTeamPromise>() => T;
}

export interface TeamConnectionSubscription
  extends Promise<AsyncIterator<TeamConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TeamEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTeamSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface TodoListSubscriptionPayload {
  mutation: MutationType;
  node: TodoList;
  updatedFields: String[];
  previousValues: TodoListPreviousValues;
}

export interface TodoListSubscriptionPayloadPromise
  extends Promise<TodoListSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TodoListPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TodoListPreviousValuesPromise>() => T;
}

export interface TodoListSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TodoListSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TodoListSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TodoListPreviousValuesSubscription>() => T;
}

export interface TodoListEdge {
  node: TodoList;
  cursor: String;
}

export interface TodoListEdgePromise
  extends Promise<TodoListEdge>,
    Fragmentable {
  node: <T = TodoListPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TodoListEdgeSubscription
  extends Promise<AsyncIterator<TodoListEdge>>,
    Fragmentable {
  node: <T = TodoListSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Team {
  id: ID_Output;
  teamName: String;
}

export interface TeamPromise extends Promise<Team>, Fragmentable {
  id: () => Promise<ID_Output>;
  teamName: () => Promise<String>;
  members: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  todoLists: <T = FragmentableArray<TodoList>>(
    args?: {
      where?: TodoListWhereInput;
      orderBy?: TodoListOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface TeamSubscription
  extends Promise<AsyncIterator<Team>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  teamName: () => Promise<AsyncIterator<String>>;
  members: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  todoLists: <T = Promise<AsyncIterator<TodoListSubscription>>>(
    args?: {
      where?: TodoListWhereInput;
      orderBy?: TodoListOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateTodo {
  count: Int;
}

export interface AggregateTodoPromise
  extends Promise<AggregateTodo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTodoSubscription
  extends Promise<AsyncIterator<AggregateTodo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TeamSubscriptionPayload {
  mutation: MutationType;
  node: Team;
  updatedFields: String[];
  previousValues: TeamPreviousValues;
}

export interface TeamSubscriptionPayloadPromise
  extends Promise<TeamSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TeamPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TeamPreviousValuesPromise>() => T;
}

export interface TeamSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TeamSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TeamSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TeamPreviousValuesSubscription>() => T;
}

export interface TodoConnection {
  pageInfo: PageInfo;
  edges: TodoEdge[];
}

export interface TodoConnectionPromise
  extends Promise<TodoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TodoEdge>>() => T;
  aggregate: <T = AggregateTodoPromise>() => T;
}

export interface TodoConnectionSubscription
  extends Promise<AsyncIterator<TodoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TodoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTodoSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TodoPreviousValues {
  id: ID_Output;
  description: String;
  completed?: Boolean;
}

export interface TodoPreviousValuesPromise
  extends Promise<TodoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  completed: () => Promise<Boolean>;
}

export interface TodoPreviousValuesSubscription
  extends Promise<AsyncIterator<TodoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
  completed: () => Promise<AsyncIterator<Boolean>>;
}

export interface TodoSubscriptionPayload {
  mutation: MutationType;
  node: Todo;
  updatedFields: String[];
  previousValues: TodoPreviousValues;
}

export interface TodoSubscriptionPayloadPromise
  extends Promise<TodoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TodoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TodoPreviousValuesPromise>() => T;
}

export interface TodoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TodoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TodoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TodoPreviousValuesSubscription>() => T;
}

export interface Todo {
  id: ID_Output;
  description: String;
  completed?: Boolean;
}

export interface TodoPromise extends Promise<Todo>, Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  partOf: <T = TodoListPromise>() => T;
  completed: () => Promise<Boolean>;
}

export interface TodoSubscription
  extends Promise<AsyncIterator<Todo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
  partOf: <T = TodoListSubscription>() => T;
  completed: () => Promise<AsyncIterator<Boolean>>;
}

export interface TeamPreviousValues {
  id: ID_Output;
  teamName: String;
}

export interface TeamPreviousValuesPromise
  extends Promise<TeamPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  teamName: () => Promise<String>;
}

export interface TeamPreviousValuesSubscription
  extends Promise<AsyncIterator<TeamPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  teamName: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTodoList {
  count: Int;
}

export interface AggregateTodoListPromise
  extends Promise<AggregateTodoList>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTodoListSubscription
  extends Promise<AsyncIterator<AggregateTodoList>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateTeam {
  count: Int;
}

export interface AggregateTeamPromise
  extends Promise<AggregateTeam>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTeamSubscription
  extends Promise<AsyncIterator<AggregateTeam>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TodoEdge {
  node: Todo;
  cursor: String;
}

export interface TodoEdgePromise extends Promise<TodoEdge>, Fragmentable {
  node: <T = TodoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TodoEdgeSubscription
  extends Promise<AsyncIterator<TodoEdge>>,
    Fragmentable {
  node: <T = TodoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TodoListConnection {
  pageInfo: PageInfo;
  edges: TodoListEdge[];
}

export interface TodoListConnectionPromise
  extends Promise<TodoListConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TodoListEdge>>() => T;
  aggregate: <T = AggregateTodoListPromise>() => T;
}

export interface TodoListConnectionSubscription
  extends Promise<AsyncIterator<TodoListConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TodoListEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTodoListSubscription>() => T;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "TodoList",
    embedded: false
  },
  {
    name: "Todo",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Team",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;

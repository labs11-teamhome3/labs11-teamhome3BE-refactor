type Mutation {
  createUser(authId: String!): User!
  authenticateUser(idToken: String!): User
  createTodo(description: String!, partOf: ID!, completed: Boolean): Todo
  deleteTodo(id: String!): Todo
  updateTodo(id: String!, description: String!, completed: Boolean): Todo
  createTodoList(description: String!, ownedBy: String!, assignedTo: String!, completed: Boolean, inTeam: ID): TodoList
  deleteTodoList(id: String!): TodoList!
  updateTodoList(id: String!, description: String!, completed: Boolean): TodoList
  createTeam(teamName: String!): Team
  deleteTeam(id: ID!): Team
  updateTeamName(id: ID!, teamName: ID!): Team
  addTodoListToTeam(teamId: ID!, todoListId: ID!): Team
  removeTodoListFromTeam(teamId: ID!, todoListId: ID!): Team
  addUserToTeam(userId: ID!, teamId: ID!): Team
  removeUserFromTeam(userId: ID!, teamId: ID!): Team
  toggleTodoComplete(todoId: ID!): Todo
  toggleTodoListComplete(todoListId: ID!): TodoList
  addUserToOwners(userId: ID!, todoListId: ID!): TodoList
  addUserToAssignees(userId: ID!, todoListId: ID!): TodoList
  removeUserFromOwners(userId: ID!, todoListId: ID!): TodoList
  removeUserFromAssignees(userId: ID!, todoListId: ID!): TodoList
  createMessage(title: String!, teamId: ID!, userId: ID!, content: String!): Message
  deleteMessage(id: ID!): Message
  updateMessage(id: ID!, title: String, content: String): Message

  addEvent(userId: ID, teamId: ID!, action_string: String!, object_string: String!): Event
  deleteEvent(eventId: ID!): Event
  addTag(name: String!, teamId: ID!): Tag
  updateTag(tagId: ID!, name: String): Tag
  deleteTag(tagId: ID!): Tag
  addMessageComment(messageId: ID!, userId: ID!, content: String!, image: String): MessageComment
  updateMessageComment(commentId: ID!, content: String, image: String): MessageComment
  deleteMessageComment(commentId: ID!): MessageComment
  likeMessageComment(commentId: ID!, userId: ID!): MessageComment
  unlikeMessageComment(commentId: ID!, userId: ID!): MessageComment

  addDocument(userId: ID!, doc_url: String!, folderId: ID, teamId: ID!, title: String!, textContent: String!, tagId: ID): Document
  deleteDocument(documentId: ID!): Document
  ## Need to add ability to subscribe users and add images 

  addDocumentComment(userId: ID!, documentId: ID!, content: String!): DocumentComment
  deleteDocumentComment(documentCommentId: ID!): DocumentComment
  ## Need to add ability to like comments and add images

  addFolder(title: String!, userId: ID!, teamId: ID!): Folder
  deleteFolder(folderId: ID!): Folder
  updateFolderTitle(folderId: ID!, title: String!): Folder
}

type Query {
  info: String!
  todoes: [Todo]
  todo(id: ID!): Todo!
  users: [User]
  user(authId: String, id: ID): User!
  todoLists(teamId: ID): [TodoList]
  todoList(id: ID!): TodoList!
  teams: [Team]
  team(id: ID!): Team!
  messages(teamId: ID!): [Message]
  message(id: ID!): Message
  events: [Event]
  findEventById(eventId: ID!): Event
  findEventsByTeam(teamId: ID!): [Event]
  findEventsByUser(userId: ID!): [Event]
  tags: [Tag]
  findTagsByTeam(teamId: ID!): [Tag]
  findTag(tagId: ID!): Tag
  messageComments: [MessageComment]
  findMessageCommentsByMessage(messageId: ID!): [MessageComment]
  findMessageComment(commentId: ID!): MessageComment
  ## Need to add queries for Documents, DocComments, Folders
}

type TodoList {
  id: ID!
  description: String!
  ownedBy: [User!]!
  assignedTo: [User!]!
  todos: [Todo!]!
  completed: Boolean
  inTeam: Team
}

type Todo {
  id: ID!
  description: String!
  partOf: TodoList
  completed: Boolean
}

type User {
  id: ID!
  identity: String
  authId: String
  name: String!
  todoListsOwned: [TodoList]
  todoListsAssigned: [TodoList]
  inTeam: [Team]
}

type Team {
  id: ID!
  teamName: String!
  members: [User!]
  todoLists: [TodoList!]
  messages: [Message!]
  events: [Event]
  tags: [Tag]
}

type Message {
  id: ID!
  title: String!
  creator: User!
  inTeam: Team!
  content: String!
  images: [String]
  tag: Tag
  comments: [MessageComment]
  subscribedUsers: [User]
}

type MessageComment {
  id: ID!
  content: String!
  user: User!
  message: Message!
  image: String
  likes: [User]
}

type Tag {
  id: ID!
  name: String!
  team: Team
}

type Event {
  id: ID!
  team: Team!
  user: User
  action_string: String!
  object_string: String!
}

type Document {
  id: ID!
  doc_url: String!
  user: User!
  folder: Folder
  team: Team!
  title: String!
  textContent: String!
  tag: Tag
  images: [String]
  comments: [DocumentComment]
  subscribedUsers: [User]
}

type DocumentComment {
  id: ID! 
  user: User!
  document: Document!
  content: String!
  image: String
  likes: [User]
}

type Folder {
  id: ID!
  title: String!
  user: User!
  team: Team!
}

scalar Date

enum Role {
  ADMIN
  GENERAL
}

type Mutation {
  createUser(name: String!, email: String!, sub: String, profilePic: String): User!
  authenticateUser(idToken: String!): User
  createTodo(description: String!, partOf: ID!, completed: Boolean): Todo
  deleteTodo(id: String!): Todo
  updateTodo(id: String!, description: String!, completed: Boolean): Todo
  createTodoList(
    description: String!
    ownedBy: String!
    completed: Boolean
    inTeam: ID
  ): TodoList
  deleteTodoList(id: String!): TodoList!
  updateTodoList(
    id: String!
    description: String!
    completed: Boolean
  ): TodoList
  createTeam(teamName: String!, userId: ID!): Team
  deleteTeam(id: ID!): Team
  updateTeamName(id: ID!, teamName: ID!): Team
  addTodoListToTeam(teamId: ID!, todoListId: ID!): Team
  removeTodoListFromTeam(teamId: ID!, todoListId: ID!): Team
  addUserToTeam(userId: ID!, teamId: ID!): Team
  removeUserFromTeam(userId: ID!, teamId: ID!): Team
  toggleTodoComplete(todoId: ID!): Todo
  toggleTodoListComplete(todoListId: ID!): TodoList
  addUserToOwners(userId: ID!, todoListId: ID!): TodoList
  addUserToAssignees(userId: ID!, todoListId: ID!): TodoList
  removeUserFromOwners(userId: ID!, todoListId: ID!): TodoList
  removeUserFromAssignees(userId: ID!, todoListId: ID!): TodoList
  createMessage(
    title: String!
    teamId: ID!
    userId: ID!
    content: String!
  ): Message
  updateMessage(title: String, content: String): Message
  deleteMessage(id: ID!): Message
  addEvent(
    userId: ID
    teamId: ID!
    action_string: String!
    object_string: String!
  ): Event
  deleteEvent(eventId: ID!): Event
  addTag(name: String!, teamId: ID!): Tag
  updateTag(tagId: ID!, name: String): Tag
  deleteTag(tagId: ID!): Tag
  addMessageComment(
    messageId: ID!
    userId: ID!
    content: String!
    image: String
  ): MessageComment
  updateMessageComment(
    commentId: ID!
    content: String
    image: String
  ): MessageComment
  deleteMessageComment(commentId: ID!): MessageComment
  likeMessageComment(commentId: ID!, userId: ID!): MessageComment
  unlikeMessageComment(commentId: ID!, userId: ID!): MessageComment

  addDocument(
    doc_url: String!
    folderId: ID
    teamId: ID!
    title: String!
    textContent: String!
    tagId: ID
    image: String
  ): Document
  updateDocument(
    documentId: ID!
    doc_url: String
    folderId: ID
    title: String
    textContent: String
    tagId: ID
    image: String
  ): Document
  deleteDocument(documentId: ID!): Document
  ## Need to add ability to subscribe users

  addDocumentComment(
    userId: ID!
    documentId: ID!
    content: String!
  ): DocumentComment
  deleteDocumentComment(documentCommentId: ID!): DocumentComment
  likeDocumentComment(commentId: ID!, userId: ID!): DocumentComment
  unlikeDocumentComment(commentId: ID!, userId: ID!): DocumentComment

  createFolder(title: String!, userId: ID!, teamId: ID!): Folder
  deleteFolder(folderId: ID!): Folder
  updateFolderTitle(folderId: ID!, title: String): Folder
  addDocumentToFolder(folderId: ID!, documentId: ID!): Document
  removeDocumentFromFolder(folderId: ID!, documentId: ID!): Document

  addTagToMessage(messageId: ID!, tagId: ID!): Message
  removeTagFromMessage(messageId: ID!): Message
  addTagToDocument(documentId: ID!, tagId: ID!): Document
  removeTagFromDocument(documentId: ID!): Document
}

type Query {
  info: String!
  todoes(todoListId: ID): [Todo]
  todo(id: ID!): Todo!
  users: [User]
  user(authId: String, id: ID): User!
  todoLists(teamId: ID): [TodoList]
  todoList(id: ID!): TodoList!
  teamsByUser(userId: ID): [Team]
  team(id: ID!): Team!
  messages(teamId: ID): [Message]
  message(id: ID!): Message
  findEventById(eventId: ID!): Event
  findEventsByTeam(teamId: ID): [Event]
  findEventsByUser(userId: ID!): [Event]
  findTagsByTeam(teamId: ID!): [Tag]
  findTag(tagId: ID!): Tag
  findMessageCommentsByMessage(messageId: ID!): [MessageComment]
  findMessageComment(commentId: ID!): MessageComment
  findMessagesByTag(tagId: ID): [Message]

  findDocument(id: ID!): Document
  findDocumentsByTeam(teamId: ID): [Document]
  findDocumentsByUser(userId: ID): [Document]
  findDocumentsByTag(tagId: ID): [Document]

  documentComments: [DocumentComment]
  findDocumentComment(id: ID!): DocumentComment
  findDocumentCommentsByUser(userId: ID): [DocumentComment]
  findDocumentCommentsByTeam(teamId: ID): [DocumentComment]

  findFolder(id: ID): Folder
  findFoldersByTeam(teamId: ID): [Folder]
}

type TodoList {
  id: ID!
  createdAt: Date
  description: String!
  ownedBy: [User!]!
  assignedTo: [User!]!
  todos: [Todo!]!
  completed: Boolean
  inTeam: Team
}

type Todo {
  id: ID!
  createdAt: Date
  description: String!
  partOf: TodoList
  completed: Boolean
}

type User {
  id: ID!
  createdAt: Date
  identity: String
  authId: String
  name: String
  todoListsOwned: [TodoList]
  todoListsAssigned: [TodoList]
  inTeam: [Team]
  role: Role
  email: String
  phone: String
  profilePic: String
}

type Team {
  id: ID!
  createdAt: Date
  teamName: String!
  members: [User!]
  todoLists: [TodoList!]
  messages: [Message!]
  events: [Event]
  tags: [Tag]
  documents: [Document]
  folders: [Folder]
}

type Message {
  id: ID!
  createdAt: Date
  title: String!
  creator: User!
  inTeam: Team!
  content: String!
  images: [String]
  tag: Tag
  comments: [MessageComment]
  subscribedUsers: [User]
}

type MessageComment {
  id: ID!
  createdAt: Date
  content: String!
  user: User!
  message: Message!
  image: String
  likes: [User]
}

type Tag {
  id: ID!
  createdAt: Date
  name: String!
  team: Team
}

type Event {
  id: ID!
  createdAt: Date
  team: Team!
  user: User
  action_string: String!
  object_string: String!
}

type Document {
  id: ID!
  createdAt: Date
  doc_url: String!
  user: User!
  folder: Folder
  team: Team!
  title: String!
  textContent: String!
  tag: Tag
  images: [String]
  comments: [DocumentComment]
  subscribedUsers: [User]
}

type DocumentComment {
  id: ID!
  createdAt: Date
  user: User!
  document: Document!
  content: String!
  image: String
  likes: [User]
}

type Folder {
  id: ID!
  createdAt: Date
  title: String!
  user: User!
  team: Team!
  documents: [Document]
}

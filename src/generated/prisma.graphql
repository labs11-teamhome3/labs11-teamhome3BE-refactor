# source: http://localhost:4466
# timestamp: Tue Mar 26 2019 15:21:05 GMT-0600 (Mountain Daylight Time)

type AggregateTodo {
  count: Int!
}

type AggregateTodoList {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createTodoList(data: TodoListCreateInput!): TodoList!
  createTodo(data: TodoCreateInput!): Todo!
  createUser(data: UserCreateInput!): User!
  updateTodoList(data: TodoListUpdateInput!, where: TodoListWhereUniqueInput!): TodoList
  updateTodo(data: TodoUpdateInput!, where: TodoWhereUniqueInput!): Todo
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteTodoList(where: TodoListWhereUniqueInput!): TodoList
  deleteTodo(where: TodoWhereUniqueInput!): Todo
  deleteUser(where: UserWhereUniqueInput!): User
  upsertTodoList(where: TodoListWhereUniqueInput!, create: TodoListCreateInput!, update: TodoListUpdateInput!): TodoList!
  upsertTodo(where: TodoWhereUniqueInput!, create: TodoCreateInput!, update: TodoUpdateInput!): Todo!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyTodoLists(data: TodoListUpdateManyMutationInput!, where: TodoListWhereInput): BatchPayload!
  updateManyTodoes(data: TodoUpdateManyMutationInput!, where: TodoWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyTodoLists(where: TodoListWhereInput): BatchPayload!
  deleteManyTodoes(where: TodoWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  todoLists(where: TodoListWhereInput, orderBy: TodoListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TodoList]!
  todoes(where: TodoWhereInput, orderBy: TodoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Todo]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  todoList(where: TodoListWhereUniqueInput!): TodoList
  todo(where: TodoWhereUniqueInput!): Todo
  user(where: UserWhereUniqueInput!): User
  todoListsConnection(where: TodoListWhereInput, orderBy: TodoListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TodoListConnection!
  todoesConnection(where: TodoWhereInput, orderBy: TodoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TodoConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  todoList(where: TodoListSubscriptionWhereInput): TodoListSubscriptionPayload
  todo(where: TodoSubscriptionWhereInput): TodoSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Todo implements Node {
  id: ID!
  description: String!
  partOf: TodoList
  completed: Boolean
}

"""A connection to a list of items."""
type TodoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TodoEdge]!
  aggregate: AggregateTodo!
}

input TodoCreateInput {
  description: String!
  completed: Boolean
  partOf: TodoListCreateOneWithoutTodosInput
}

input TodoCreateManyWithoutPartOfInput {
  create: [TodoCreateWithoutPartOfInput!]
  connect: [TodoWhereUniqueInput!]
}

input TodoCreateWithoutPartOfInput {
  description: String!
  completed: Boolean
}

"""An edge in a connection."""
type TodoEdge {
  """The item at the end of the edge."""
  node: Todo!

  """A cursor for use in pagination."""
  cursor: String!
}

type TodoList implements Node {
  id: ID!
  createdAt: DateTime!
  description: String!
  ownedBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  assignedTo(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  todos(where: TodoWhereInput, orderBy: TodoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Todo!]
  completed: Boolean
}

"""A connection to a list of items."""
type TodoListConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TodoListEdge]!
  aggregate: AggregateTodoList!
}

input TodoListCreateInput {
  description: String!
  completed: Boolean
  ownedBy: UserCreateManyWithoutTodoListsOwnedInput
  assignedTo: UserCreateManyWithoutTodoListsAssignedInput
  todos: TodoCreateManyWithoutPartOfInput
}

input TodoListCreateManyWithoutAssignedToInput {
  create: [TodoListCreateWithoutAssignedToInput!]
  connect: [TodoListWhereUniqueInput!]
}

input TodoListCreateManyWithoutOwnedByInput {
  create: [TodoListCreateWithoutOwnedByInput!]
  connect: [TodoListWhereUniqueInput!]
}

input TodoListCreateOneWithoutTodosInput {
  create: TodoListCreateWithoutTodosInput
  connect: TodoListWhereUniqueInput
}

input TodoListCreateWithoutAssignedToInput {
  description: String!
  completed: Boolean
  ownedBy: UserCreateManyWithoutTodoListsOwnedInput
  todos: TodoCreateManyWithoutPartOfInput
}

input TodoListCreateWithoutOwnedByInput {
  description: String!
  completed: Boolean
  assignedTo: UserCreateManyWithoutTodoListsAssignedInput
  todos: TodoCreateManyWithoutPartOfInput
}

input TodoListCreateWithoutTodosInput {
  description: String!
  completed: Boolean
  ownedBy: UserCreateManyWithoutTodoListsOwnedInput
  assignedTo: UserCreateManyWithoutTodoListsAssignedInput
}

"""An edge in a connection."""
type TodoListEdge {
  """The item at the end of the edge."""
  node: TodoList!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TodoListOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  completed_ASC
  completed_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TodoListPreviousValues {
  id: ID!
  createdAt: DateTime!
  description: String!
  completed: Boolean
}

input TodoListScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TodoListScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TodoListScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TodoListScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  completed: Boolean

  """All values that are not equal to given value."""
  completed_not: Boolean
}

type TodoListSubscriptionPayload {
  mutation: MutationType!
  node: TodoList
  updatedFields: [String!]
  previousValues: TodoListPreviousValues
}

input TodoListSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TodoListSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TodoListSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TodoListSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TodoListWhereInput
}

input TodoListUpdateInput {
  description: String
  completed: Boolean
  ownedBy: UserUpdateManyWithoutTodoListsOwnedInput
  assignedTo: UserUpdateManyWithoutTodoListsAssignedInput
  todos: TodoUpdateManyWithoutPartOfInput
}

input TodoListUpdateManyDataInput {
  description: String
  completed: Boolean
}

input TodoListUpdateManyMutationInput {
  description: String
  completed: Boolean
}

input TodoListUpdateManyWithoutAssignedToInput {
  create: [TodoListCreateWithoutAssignedToInput!]
  connect: [TodoListWhereUniqueInput!]
  set: [TodoListWhereUniqueInput!]
  disconnect: [TodoListWhereUniqueInput!]
  delete: [TodoListWhereUniqueInput!]
  update: [TodoListUpdateWithWhereUniqueWithoutAssignedToInput!]
  updateMany: [TodoListUpdateManyWithWhereNestedInput!]
  deleteMany: [TodoListScalarWhereInput!]
  upsert: [TodoListUpsertWithWhereUniqueWithoutAssignedToInput!]
}

input TodoListUpdateManyWithoutOwnedByInput {
  create: [TodoListCreateWithoutOwnedByInput!]
  connect: [TodoListWhereUniqueInput!]
  set: [TodoListWhereUniqueInput!]
  disconnect: [TodoListWhereUniqueInput!]
  delete: [TodoListWhereUniqueInput!]
  update: [TodoListUpdateWithWhereUniqueWithoutOwnedByInput!]
  updateMany: [TodoListUpdateManyWithWhereNestedInput!]
  deleteMany: [TodoListScalarWhereInput!]
  upsert: [TodoListUpsertWithWhereUniqueWithoutOwnedByInput!]
}

input TodoListUpdateManyWithWhereNestedInput {
  where: TodoListScalarWhereInput!
  data: TodoListUpdateManyDataInput!
}

input TodoListUpdateOneWithoutTodosInput {
  create: TodoListCreateWithoutTodosInput
  connect: TodoListWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TodoListUpdateWithoutTodosDataInput
  upsert: TodoListUpsertWithoutTodosInput
}

input TodoListUpdateWithoutAssignedToDataInput {
  description: String
  completed: Boolean
  ownedBy: UserUpdateManyWithoutTodoListsOwnedInput
  todos: TodoUpdateManyWithoutPartOfInput
}

input TodoListUpdateWithoutOwnedByDataInput {
  description: String
  completed: Boolean
  assignedTo: UserUpdateManyWithoutTodoListsAssignedInput
  todos: TodoUpdateManyWithoutPartOfInput
}

input TodoListUpdateWithoutTodosDataInput {
  description: String
  completed: Boolean
  ownedBy: UserUpdateManyWithoutTodoListsOwnedInput
  assignedTo: UserUpdateManyWithoutTodoListsAssignedInput
}

input TodoListUpdateWithWhereUniqueWithoutAssignedToInput {
  where: TodoListWhereUniqueInput!
  data: TodoListUpdateWithoutAssignedToDataInput!
}

input TodoListUpdateWithWhereUniqueWithoutOwnedByInput {
  where: TodoListWhereUniqueInput!
  data: TodoListUpdateWithoutOwnedByDataInput!
}

input TodoListUpsertWithoutTodosInput {
  update: TodoListUpdateWithoutTodosDataInput!
  create: TodoListCreateWithoutTodosInput!
}

input TodoListUpsertWithWhereUniqueWithoutAssignedToInput {
  where: TodoListWhereUniqueInput!
  update: TodoListUpdateWithoutAssignedToDataInput!
  create: TodoListCreateWithoutAssignedToInput!
}

input TodoListUpsertWithWhereUniqueWithoutOwnedByInput {
  where: TodoListWhereUniqueInput!
  update: TodoListUpdateWithoutOwnedByDataInput!
  create: TodoListCreateWithoutOwnedByInput!
}

input TodoListWhereInput {
  """Logical AND on all given filters."""
  AND: [TodoListWhereInput!]

  """Logical OR on all given filters."""
  OR: [TodoListWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TodoListWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  completed: Boolean

  """All values that are not equal to given value."""
  completed_not: Boolean
  ownedBy_every: UserWhereInput
  ownedBy_some: UserWhereInput
  ownedBy_none: UserWhereInput
  assignedTo_every: UserWhereInput
  assignedTo_some: UserWhereInput
  assignedTo_none: UserWhereInput
  todos_every: TodoWhereInput
  todos_some: TodoWhereInput
  todos_none: TodoWhereInput
}

input TodoListWhereUniqueInput {
  id: ID
  description: String
}

enum TodoOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  completed_ASC
  completed_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TodoPreviousValues {
  id: ID!
  description: String!
  completed: Boolean
}

input TodoScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TodoScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TodoScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TodoScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  completed: Boolean

  """All values that are not equal to given value."""
  completed_not: Boolean
}

type TodoSubscriptionPayload {
  mutation: MutationType!
  node: Todo
  updatedFields: [String!]
  previousValues: TodoPreviousValues
}

input TodoSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TodoSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TodoSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TodoSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TodoWhereInput
}

input TodoUpdateInput {
  description: String
  completed: Boolean
  partOf: TodoListUpdateOneWithoutTodosInput
}

input TodoUpdateManyDataInput {
  description: String
  completed: Boolean
}

input TodoUpdateManyMutationInput {
  description: String
  completed: Boolean
}

input TodoUpdateManyWithoutPartOfInput {
  create: [TodoCreateWithoutPartOfInput!]
  connect: [TodoWhereUniqueInput!]
  set: [TodoWhereUniqueInput!]
  disconnect: [TodoWhereUniqueInput!]
  delete: [TodoWhereUniqueInput!]
  update: [TodoUpdateWithWhereUniqueWithoutPartOfInput!]
  updateMany: [TodoUpdateManyWithWhereNestedInput!]
  deleteMany: [TodoScalarWhereInput!]
  upsert: [TodoUpsertWithWhereUniqueWithoutPartOfInput!]
}

input TodoUpdateManyWithWhereNestedInput {
  where: TodoScalarWhereInput!
  data: TodoUpdateManyDataInput!
}

input TodoUpdateWithoutPartOfDataInput {
  description: String
  completed: Boolean
}

input TodoUpdateWithWhereUniqueWithoutPartOfInput {
  where: TodoWhereUniqueInput!
  data: TodoUpdateWithoutPartOfDataInput!
}

input TodoUpsertWithWhereUniqueWithoutPartOfInput {
  where: TodoWhereUniqueInput!
  update: TodoUpdateWithoutPartOfDataInput!
  create: TodoCreateWithoutPartOfInput!
}

input TodoWhereInput {
  """Logical AND on all given filters."""
  AND: [TodoWhereInput!]

  """Logical OR on all given filters."""
  OR: [TodoWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TodoWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  completed: Boolean

  """All values that are not equal to given value."""
  completed_not: Boolean
  partOf: TodoListWhereInput
}

input TodoWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  name: String!
  todoListsOwned(where: TodoListWhereInput, orderBy: TodoListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TodoList!]
  todoListsAssigned(where: TodoListWhereInput, orderBy: TodoListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TodoList!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  todoListsOwned: TodoListCreateManyWithoutOwnedByInput
  todoListsAssigned: TodoListCreateManyWithoutAssignedToInput
}

input UserCreateManyWithoutTodoListsAssignedInput {
  create: [UserCreateWithoutTodoListsAssignedInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutTodoListsOwnedInput {
  create: [UserCreateWithoutTodoListsOwnedInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutTodoListsAssignedInput {
  name: String!
  todoListsOwned: TodoListCreateManyWithoutOwnedByInput
}

input UserCreateWithoutTodoListsOwnedInput {
  name: String!
  todoListsAssigned: TodoListCreateManyWithoutAssignedToInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  name: String!
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  todoListsOwned: TodoListUpdateManyWithoutOwnedByInput
  todoListsAssigned: TodoListUpdateManyWithoutAssignedToInput
}

input UserUpdateManyDataInput {
  name: String
}

input UserUpdateManyMutationInput {
  name: String
}

input UserUpdateManyWithoutTodoListsAssignedInput {
  create: [UserCreateWithoutTodoListsAssignedInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTodoListsAssignedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTodoListsAssignedInput!]
}

input UserUpdateManyWithoutTodoListsOwnedInput {
  create: [UserCreateWithoutTodoListsOwnedInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTodoListsOwnedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTodoListsOwnedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateWithoutTodoListsAssignedDataInput {
  name: String
  todoListsOwned: TodoListUpdateManyWithoutOwnedByInput
}

input UserUpdateWithoutTodoListsOwnedDataInput {
  name: String
  todoListsAssigned: TodoListUpdateManyWithoutAssignedToInput
}

input UserUpdateWithWhereUniqueWithoutTodoListsAssignedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTodoListsAssignedDataInput!
}

input UserUpdateWithWhereUniqueWithoutTodoListsOwnedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTodoListsOwnedDataInput!
}

input UserUpsertWithWhereUniqueWithoutTodoListsAssignedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTodoListsAssignedDataInput!
  create: UserCreateWithoutTodoListsAssignedInput!
}

input UserUpsertWithWhereUniqueWithoutTodoListsOwnedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTodoListsOwnedDataInput!
  create: UserCreateWithoutTodoListsOwnedInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  todoListsOwned_every: TodoListWhereInput
  todoListsOwned_some: TodoListWhereInput
  todoListsOwned_none: TodoListWhereInput
  todoListsAssigned_every: TodoListWhereInput
  todoListsAssigned_some: TodoListWhereInput
  todoListsAssigned_none: TodoListWhereInput
}

input UserWhereUniqueInput {
  id: ID
}
